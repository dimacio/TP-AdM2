services:
  postgres:
    image: postgres:13
    container_name: mlflow_postgres_db
    restart: always
    ports:
      - "${PG_PORT:-5432}:5432"
    networks:
      - backend_net
    environment:
      POSTGRES_USER: ${PG_USER:-mlflow_user}
      POSTGRES_PASSWORD: ${PG_PASSWORD:-mlflow_password}
      POSTGRES_DB: ${PG_DATABASE:-mlflow_db}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "pg_isready -U ${PG_USER:-mlflow_user} -d ${PG_DATABASE:-mlflow_db} -h postgres",
        ]
      interval: 10s
      timeout: 5s
      retries: 5

  s3: # MinIO
    image: minio/minio:latest
    container_name: mlflow_minio_s3
    restart: always
    ports:
      - "${MINIO_PORT:-9000}:9000"
      - "${MINIO_CONSOLE_PORT:-9001}:9001"
    networks:
      - backend_net
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER:-minioadmin}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD:-minioadmin}
    command: server /data --console-address ":9001"
    volumes:
      - minio_data:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 10s
      timeout: 5s
      retries: 5

  create_s3_bucket:
    image: minio/mc:latest
    container_name: mlflow_mc_bucket_creator
    depends_on:
      s3:
        condition: service_healthy
    networks:
      - backend_net
    environment:
      MC_HOST_S3ALIAS: http://${MINIO_ROOT_USER:-minioadmin}:${MINIO_ROOT_PASSWORD:-minioadmin}@s3:9000
      # Esta variable tomará el valor de MLFLOW_BUCKET_NAME del host, o "mi-bucket-experimentos" si no está definida.
      # Es crucial que este nombre sea el que tu script de Python espera.
      BUCKET_TO_CREATE: ${MLFLOW_BUCKET_NAME:-mi-bucket-experimentos}
    entrypoint: >
      /bin/sh -c '
        echo "Esperando a MinIO (servicio s3)...";
        sleep 20; # Aumentado por si acaso
        echo "Configurando alias mc para el servicio s3...";
        mc alias set s3alias http://s3:9000 ${MINIO_ROOT_USER:-minioadmin} ${MINIO_ROOT_PASSWORD:-minioadmin} --api S3v4;
        echo "Alias s3alias configurado.";
        
        echo "Nombre del bucket a crear/verificar desde ENV: [$${BUCKET_TO_CREATE}]";
        
        if [ -z "$${BUCKET_TO_CREATE}" ]; then
          echo "ERROR: BUCKET_TO_CREATE está vacío. No se puede continuar." >&2
          exit 1;
        fi

        echo "Verificando/creando bucket: s3alias/$${BUCKET_TO_CREATE}";
        if ! mc ls "s3alias/$${BUCKET_TO_CREATE}" > /dev/null 2>&1; then
          echo "Bucket s3alias/$${BUCKET_TO_CREATE} no encontrado, creando...";
          mc mb "s3alias/$${BUCKET_TO_CREATE}";
          echo "Estableciendo política pública para s3alias/$${BUCKET_TO_CREATE}...";
          mc policy set public "s3alias/$${BUCKET_TO_CREATE}";
        else
          echo "Bucket s3alias/$${BUCKET_TO_CREATE} ya existe.";
        fi;
        echo "Configuración de bucket completada.";
        exit 0;
      '

  mlflow: # Servidor MLflow
    restart: always
    build:
      context: .
      dockerfile: ./dockerfiles/Dockerfile.mlflow
    image: mlflow_server_app_custom_image # Un nombre de imagen único
    container_name: mlflow_server_instance
    depends_on:
      postgres:
        condition: service_healthy
      s3:
        condition: service_healthy
      create_s3_bucket:
        condition: service_completed_successfully
    ports:
      - "${MLFLOW_PORT:-5001}:5000"
    networks:
      - backend_net
    environment:
      BACKEND_STORE_URI: postgresql://${PG_USER:-mlflow_user}:${PG_PASSWORD:-mlflow_password}@postgres:5432/${PG_DATABASE:-mlflow_db}
      DEFAULT_ARTIFACT_ROOT: s3://${MLFLOW_BUCKET_NAME:-mi-bucket-experimentos}/artifacts
      AWS_ACCESS_KEY_ID: ${MINIO_ROOT_USER:-minioadmin}
      AWS_SECRET_ACCESS_KEY: ${MINIO_ROOT_PASSWORD:-minioadmin}
      MLFLOW_S3_ENDPOINT_URL: http://s3:9000
    command: >
      mlflow server
      --backend-store-uri ${BACKEND_STORE_URI}
      --default-artifact-root ${DEFAULT_ARTIFACT_ROOT}
      --host 0.0.0.0
      --port 5000
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--no-verbose",
          "--tries=1",
          "--spider",
          "http://localhost:5000/health",
        ]
      interval: 15s
      timeout: 10s
      retries: 10
      start_period: 45s

  yahoo_trainer: # Tu script de entrenamiento
    build:
      context: .
      dockerfile: Dockerfile.train
    container_name: yahoo_training_script
    depends_on:
      mlflow:
        condition: service_healthy
    volumes:
      - ./data:/app/data
      - ./plots_output:/app/plots
    environment:
      TICKER: AAPL
      START_DATE: 2018-01-01
      MLFLOW_TRACKING_URI: http://mlflow:5000
      AWS_ACCESS_KEY_ID: ${MINIO_ROOT_USER:-minioadmin}
      AWS_SECRET_ACCESS_KEY: ${MINIO_ROOT_PASSWORD:-minioadmin}
      MLFLOW_S3_ENDPOINT_URL: http://s3:9000
      MLFLOW_EXPERIMENT_NAME: ${MLFLOW_EXPERIMENT_NAME:-Prediccion_Acciones_LSTM_DC_Final}
      MLFLOW_BUCKET_NAME: ${MLFLOW_BUCKET_NAME:-mi-bucket-experimentos}
      TF_ENABLE_ONEDNN_OPTS: 0
      BACKEND_STORE_URI: unused
      DEFAULT_ARTIFACT_ROOT: unused
    networks:
      - backend_net

  model_evaluator:  # Servicio para evaluar modelo
    build:
      context: .
      dockerfile: Dockerfile.evaluate
    environment:
      TICKER: AAPL
      START_DATE: 2022-01-01
      MLFLOW_TRACKING_URI: http://mlflow:5000
      MLFLOW_EXPERIMENT_NAME: Evaluacion_Modelo_LSTM
      MLFLOW_BUCKET_NAME: mi-bucket-experimentos
    depends_on:
      - mlflow
      - minio
  
  minio:
    image: minio/minio:latest
    command: server /data --console-address ":9001"
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin

  # --- Airflow Services ---

  airflow_db:
    image: postgres:13
    container_name: airflow_postgres_db
    restart: always
    ports:
      - "${AIRFLOW_DB_PORT:-5433}:5432" # Expose Airflow DB on a different host port
    networks:
      - backend_net
    environment:
      POSTGRES_USER: ${AIRFLOW_DB_USER:-airflow_user}
      POSTGRES_PASSWORD: ${AIRFLOW_DB_PASSWORD:-airflow_pass}
      POSTGRES_DB: ${AIRFLOW_DB_NAME:-airflow_db}
    volumes:
      - airflow_db_data:/var/lib/postgresql/data
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "pg_isready -U ${AIRFLOW_DB_USER:-airflow_user} -d ${AIRFLOW_DB_NAME:-airflow_db} -h localhost",
        ]
      interval: 10s
      timeout: 5s
      retries: 5

  airflow-init:
    image: ${AIRFLOW_IMAGE_NAME:-apache/airflow:2.9.2}
    container_name: airflow_init
    depends_on:
      airflow_db:
        condition: service_healthy
    networks:
      - backend_net
    environment:
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://${AIRFLOW_DB_USER:-airflow_user}:${AIRFLOW_DB_PASSWORD:-airflow_pass}@airflow_db:5432/${AIRFLOW_DB_NAME:-airflow_db}
      # For local development, it's common to load example DAGs
      AIRFLOW__CORE__LOAD_EXAMPLES: "true"
      # The UID of the user running Airflow, should match your host user to avoid permission issues
      AIRFLOW_UID: ${AIRFLOW_UID:-50000}
      # _PIP_ADDITIONAL_REQUIREMENTS: ${_PIP_ADDITIONAL_REQUIREMENTS:-""}
    volumes:
      - ./dags:/opt/airflow/dags
      - ./logs:/opt/airflow/logs
      - ./plugins:/opt/airflow/plugins
      - ./config:/opt/airflow/config
    entrypoint: /bin/bash
    command: # NEW CORRECTED STRUCTURE
      - "-c"
      - |
        airflow db init && \
        airflow users create \
        --username admin \
        --firstname Admin \
        --lastname User \
        --role Admin \
        --email admin@example.com \
        --password admin
    # This service should only run once to initialize, then exit.
    # For subsequent runs, it will detect the DB is initialized and exit quickly.

  airflow-webserver:
    image: ${AIRFLOW_IMAGE_NAME:-apache/airflow:2.9.2}
    container_name: airflow_webserver
    restart: always
    depends_on:
      airflow-init: # Ensures DB is initialized before webserver starts
        condition: service_completed_successfully # Or service_started if init is idempotent
      airflow_db:
        condition: service_healthy
    ports:
      - "8080:8080"
    networks:
      - backend_net
    environment:
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://${AIRFLOW_DB_USER:-airflow_user}:${AIRFLOW_DB_PASSWORD:-airflow_pass}@airflow_db:5432/${AIRFLOW_DB_NAME:-airflow_db}
      AIRFLOW__WEBSERVER__EXPOSE_CONFIG: "true"
      AIRFLOW__CORE__LOAD_EXAMPLES: "true" # Consistent with init
      AIRFLOW_UID: ${AIRFLOW_UID:-50000}
      # _PIP_ADDITIONAL_REQUIREMENTS: ${_PIP_ADDITIONAL_REQUIREMENTS:-""}
      # For DockerOperator to connect to the Docker daemon on the host
      # This requires mounting the Docker socket (see volumes below)
      # DOCKER_HOST: unix:///var/run/docker.sock # If using DockerOperator to control host Docker
    volumes:
      - ./dags:/opt/airflow/dags
      - ./logs:/opt/airflow/logs
      - ./plugins:/opt/airflow/plugins
      - ./config:/opt/airflow/config
      # If you plan to use the DockerOperator to interact with the host's Docker daemon:
      # - /var/run/docker.sock:/var/run/docker.sock
    command: airflow webserver
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  airflow-scheduler:
    image: ${AIRFLOW_IMAGE_NAME:-apache/airflow:2.9.2}
    container_name: airflow_scheduler
    restart: always
    depends_on:
      airflow-init: # Ensures DB is initialized
        condition: service_completed_successfully
      airflow_db:
        condition: service_healthy
    networks:
      - backend_net
    environment:
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://${AIRFLOW_DB_USER:-airflow_user}:${AIRFLOW_DB_PASSWORD:-airflow_pass}@airflow_db:5432/${AIRFLOW_DB_NAME:-airflow_db}
      AIRFLOW__CORE__LOAD_EXAMPLES: "true" # Consistent with init
      AIRFLOW_UID: ${AIRFLOW_UID:-50000}
      # _PIP_ADDITIONAL_REQUIREMENTS: ${_PIP_ADDITIONAL_REQUIREMENTS:-""}
      # DOCKER_HOST: unix:///var/run/docker.sock # If using DockerOperator
    volumes:
      - ./dags:/opt/airflow/dags
      - ./logs:/opt/airflow/logs
      - ./plugins:/opt/airflow/plugins
      - ./config:/opt/airflow/config
      # - /var/run/docker.sock:/var/run/docker.sock # If using DockerOperator
    command: airflow scheduler
    healthcheck:
      test:
        [
          "CMD",
          "airflow",
          "jobs",
          "check",
          "--job-type",
          "SchedulerJob",
          "--hostname",
          "$$(hostname)",
        ]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

networks:
  backend_net:
    driver: bridge

volumes:
  postgres_data:
  minio_data:
  airflow_db_data:
